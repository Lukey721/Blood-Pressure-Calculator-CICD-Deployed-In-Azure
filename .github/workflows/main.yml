name: Azure CI/CD to Staging/Development

on:
  workflow_run:
    workflows: ["Ruby on Rails CI"]
    types:
      - completed  # Trigger only when the tests workflow completes

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3 

    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2 

    - name: Build and push Docker image to registry
      run: |
        docker build -t ${{ secrets.REGISTRY_USERNAME }}.azurecr.io/blood-pressure-app:latest .
        echo ${{ secrets.REGISTRY_PASSWORD }} | docker login ${{ secrets.REGISTRY_USERNAME }}.azurecr.io -u ${{ secrets.REGISTRY_USERNAME }} --password-stdin
        docker push ${{ secrets.REGISTRY_USERNAME }}.azurecr.io/blood-pressure-app:latest
      
    #Deployment Strategy Blue Green Deployment
    - name: Deploy to Staging (Green)
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_APP_NAME }}  # The green app (staging)
        slot-name: staging
        images: ${{ secrets.REGISTRY_USERNAME }}.azurecr.io/blood-pressure-app:latest

    # Set up ruby
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.2.2 # The Ruby version 
        bundler-cache: true # Enable bundler caching for faster builds

    - name: Install dependencies
      env:
        RAILS_ENV: test
      run: |
        bundle install --jobs 4 --retry 3
    
    # Run E2E tests after deployment
    - name: Run E2E tests
      env:
        RAILS_ENV: test
      run: |
        bundle exec rspec spec/features/homepage_spec.rb --format RspecJunitFormatter --out test-results/e2etests.xml
        mkdir -p test-results

    # Upload E2E report as an artifact
    - name: Publish E2E Test Results
      uses: actions/upload-artifact@v4
      with:
        name: Capybara E2E Tests
        path: test-results/e2etests.xml
    
    # Pull docker image for K6
    - name: Pull Docker image for K6
      run: docker pull grafana/k6
   
    # Run K6 script
    - name: Run K6 Load Test
      run: |
        docker run -i --rm \
          -v ${{ github.workspace }}/K6tests:/tests \
          grafana/k6 run /tests/perf_test2.js > k6report.txt
        
    # Upload ZAP report as an artifact
    - name: Upload K6 Report
      uses: actions/upload-artifact@v4
      with:
        name: k6report
        path: k6report.txt

    # Pull the ZAP Docker image
    - name: Pull Docker image for ZAP
      run: docker pull zaproxy/zap-weekly

    # Run ZAP baseline scan
    - name: Run baseline scan
      run: docker run -v /report:/zap/wrk/:rw --user root -t zaproxy/zap-weekly zap-baseline.py -t "https://bloodpressurecicd.azurewebsites.net/" -I -r zapreport.html
       
    # Upload ZAP report as an artifact
    - uses: actions/upload-artifact@v4
      name: Upload ZAP report
      with:
       name: ZAPreport
       path: /report/zapreport.html

     # Deploy to staging to production slot - Prod will not be staging
    - name: Swap Staging Slot to Production
      uses: azure/cli@v1
      with:
        inlineScript: |
          az webapp deployment slot swap --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_APP_NAME }} --slot staging --target-slot production
      env:
        AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}